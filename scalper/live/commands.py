# scalper/live/commands.py
from __future__ import annotations

import asyncio
from typing import Awaitable, Callable


class CommandHandler:
    """
    G√®re les commandes re√ßues d'un CommandStream (Telegram ou Null).
    Chaque commande est rout√©e vers un callback appropri√©.
    Les erreurs de callbacks sont captur√©es pour ne pas tuer l'orchestrateur.
    """

    def __init__(self, notifier, command_stream, status_getter, status_sender):
        self.notifier = notifier
        self.stream = command_stream
        self.status_getter = status_getter
        self.status_sender = status_sender

    async def _safe_call(self, coro: Awaitable[None], err_msg: str) -> None:
        try:
            await coro
        except Exception as e:
            try:
                await self.notifier.send(f"‚ö†Ô∏è {err_msg}: {e}")
            except Exception:
                pass  # on ne propage jamais

    async def run(
        self,
        on_pause: Callable[[], None],
        on_resume: Callable[[], None],
        on_stop: Callable[[], Awaitable[None]] | None,
        on_setup_apply: Callable[[dict], None],
        on_backtest: Callable[[str], Awaitable[None]] | None = None,
    ):
        """
        Boucle asynchrone qui lit les lignes du CommandStream
        et ex√©cute le callback appropri√©.
        TOUTE exception de callback est absorb√©e pour ne pas terminer cette task.
        """
        async for line in self.stream:
            txt = (line or "").strip()
            if not txt:
                continue

            try:
                if txt.startswith("/pause"):
                    on_pause()
                    await self.notifier.send("‚è∏Ô∏è Pause.")

                elif txt.startswith("/resume"):
                    on_resume()
                    await self.notifier.send("‚ñ∂Ô∏è Resume.")

                elif txt.startswith("/stop"):
                    if on_stop:
                        await self._safe_call(on_stop(), "Arr√™t √©chou√©")

                elif txt.startswith("/status"):
                    snap = self.status_getter()
                    await self.notifier.send(f"‚ÑπÔ∏è {snap}")

                elif txt.startswith("/setup"):
                    await self.notifier.send("üß© Setup wizard √† compl√©ter.")

                elif txt.startswith("/backtest"):
                    if on_backtest:
                        tail = txt[len("/backtest"):].strip()
                        # IMPORTANT : on ne bloque PAS la boucle de commandes.
                        asyncio.create_task(self._safe_call(
                            on_backtest(tail), "Backtest √©chou√©"
                        ))
                        await self.notifier.send("üß™ Backtest lanc√© en t√¢che de fond.")
                    else:
                        await self.notifier.send("‚ö†Ô∏è Backtest non disponible.")

                else:
                    await self.notifier.send(
                        "‚ùì Commandes: /status /pause /resume /stop /setup /backtest"
                    )

            except Exception as e:
                # On prot√®ge la boucle quoi qu'il arrive
                try:
                    await self.notifier.send(f"‚ö†Ô∏è Erreur commande: {e}")
                except Exception:
                    pass